Image Segmentation
==================

Introduction
------------
a simple task

User Guide
----------

Configuration
+++++++++++++

bitbucket-pipelines.yml
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Stage
     - Description
     - TODOs
     - Enabled
   * - linting
     - Linting check with `flake8`_, `mypy`_, `bandit`_.
     -
     - Yes
   * - test
     - Run tests with `pytest`_ and generate coverage report.
     -
     - Yes
   * - build
     - Build docker images and push them to docker registry.
     - Docker login credentials.
     - Yes

CI/CD Variables
~~~~~~~~~~~~~~~
To make sure that the CI/CD pipeline runs successfully, there are some CI/CD variables need to be set in repository settings.

.. list-table::
   :header-rows: 1

   * - Environment Variable
     - Description
   * - MODE
     - Run the API service in which MODE ("DEV", "TEST", "PROD").
   * - DATABASE_TYPE
     - Database type to use ("sqlite" or "postgresql"). Defaults to "sqlite" for DEV mode, "postgresql" for others.
   * - SQLITE_DATABASE_PATH
     - Path to SQLite database file when using SQLite. Defaults to "data/app.db" (or "data/dev.db" for DEV mode).
   * - POSTGRES_SERVER
     - PostgreSQL server hostname (required when using PostgreSQL).
   * - POSTGRES_USER
     - PostgreSQL username (required when using PostgreSQL).
   * - POSTGRES_PASSWORD
     - PostgreSQL password (required when using PostgreSQL).
   * - POSTGRES_DB
     - PostgreSQL database name (required when using PostgreSQL).
   * - DB_CONNECTION
     - Postgres DB URI for building docker image (legacy variable).

Database Configuration
++++++++++++++++++++++

The application supports both SQLite and PostgreSQL databases:

- **Development Mode (MODE=DEV)**: Uses SQLite by default with database file stored in ``data/dev.db``
- **Test/Production Modes**: Uses PostgreSQL by default (requires PostgreSQL server configuration)

You can override the default database type by setting the ``DATABASE_TYPE`` environment variable to either "sqlite" or "postgresql".

SQLite Configuration
~~~~~~~~~~~~~~~~~~~

For SQLite, you only need to set:

.. code-block:: bash

    export DATABASE_TYPE=sqlite
    export SQLITE_DATABASE_PATH=data/myapp.db  # optional, defaults to data/app.db

PostgreSQL Configuration
~~~~~~~~~~~~~~~~~~~~~~~~

For PostgreSQL, you need to set:

.. code-block:: bash

    export DATABASE_TYPE=postgresql
    export POSTGRES_SERVER=localhost
    export POSTGRES_USER=myuser
    export POSTGRES_PASSWORD=mypassword
    export POSTGRES_DB=mydatabase
   

Makefile
~~~~~~~~

.. list-table::
   :header-rows: 1

   * - Command
     - Description
   * - clean
     - Remove autogenerated folders and artifacts.
   * - clean-pyc
     - Remove python artifacts.
   * - clean-build
     - Remove build artifacts.
   * - bandit
     - Install and run `bandit`_ security analysis.
   * - mypy
     - Install and run `mypy`_ type checking.
   * - flake8
     - Install and run `flake8`_ linting.
   * - test
     - Run tests and generate coverage report.

How to Use
++++++++++

Dependencies
~~~~~~~~~~~~

THh dependencies are listed in files from folder `requirements`:

+ `base.txt`: basic requisite dependencies for running the API service.
+ `dev.txt`: dependencies for the local development, linting checks, unit tests.
+ `doc.txt`: dependencies for creating sphinx documentation.


You can install them via::

    $ pip install -r requirements/<file name>

Run API Service
~~~~~~~~~~~~~~~

Please check the section `Running the API Service locally <./docs/source/02_usage.rst>`_ for detailed information.

Run Tests
~~~~~~~~~

Please check the section `Running Tests locally <./docs/source/02_usage.rst>`_ for detailed information.

Build Sphinx Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

Please check the section `Building Sphinx Documentation locally <./docs/source/02_usage.rst>`_ for detailed information.

API Endpoints
+++++++++++++

.. list-table::
   :header-rows: 1

   * - Endpoints
     - Description
   * - **/api/v1/version**
     - API Service version information
   * - **/docs**
     - Open API documentation
   * - **/api/v1/openapi.json**
     - Open API information in json format

Maintainers
-----------

..
    TODO: List here the people responsible for the development and maintaining of this project.
    Format: **Name** - *Role/Responsibility* - Email

* **Paolo Di Prodi** - *Maintainer* - `paolo@robomotic.com <mailto:paolo@robomotic.com?subject=[None]Image%20Segmentation>`_

.. _bandit: https://bandit.readthedocs.io/en/latest/
.. _mypy: https://github.com/python/mypy
.. _flake8: https://gitlab.com/pycqa/flake8
.. _pytest: https://docs.pytest.org/en/stable/
